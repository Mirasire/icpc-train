#for Init
snippet codeinit "InitCode"
#include <iostream>
#include <algorithm>
#include <cstdio>
#include <cstring>
#include <string>
using namespace std;

$1

int main() {
	return 0;
}
endsnippet

#priority_queue
snippet pqueue "PriorityQueue"
priority_queue<
endsnippet

#for moha
snippet moha "Moha"
//orx orz ozz
endsnippet

#copyright by meskill
snippet meskill "byMeskill"
// Copyright by MESKILL
endsnippet

#define long long 
snippet dll "redefineLL"
typedef long long int ll;

endsnippet

#define scanf();
snippet sf "scanf"
scanf("%$1",&$2);
endsnippet

#define scanf2();
snippet sf2 "scanf2"
scanf("%$1%",&$2,&);
endsnippet

#define printf();
snippet pf "print"
printf("%$1",$2);
endsnippet

snippet class "class" b
class ${1:Class}{
	public:
		// constructors, asssignment, destructor
		$1();
		$1(const $1&);
		$1& operator=(const $1&);
		~$1();
	private:

};
endsnippet


#define tryCatch
snippet trycatch "TryCatch"
try {
	$1
} catch(exception event) {
	$2
}
endsnippet

#show data
snippet today "Date"
//`date +%F`
endsnippet

#MaxFlow_Dinic_tmp
snippet tmp_dinic "dinic_MaxFlow"
#define INF 0x3f3f3f3f
const int maxn = ${1:250};

struct Edge {
	int from, to, cap, flow;
	Edge(int u, int v, int c, int f) : from(u), to(v), cap(c), flow(f) {}
};

struct Dinic {
	int n, m, s, t;
	vector<Edge> edges;
	vector<int> G[maxn];
	int d[maxn], cur[maxn];
	bool vis[maxn];

	void init(int n) {
		for (int i = 0; i < n; i++) G[i].clear();
		edges.clear();
	}

	void AddEdge(int from, int to, int cap) {
		edges.push_back(Edge(from, to, cap, 0));
		edges.push_back(Edge(to, from, 0, 0));
		m = edges.size();
		G[from].push_back(m - 2);
		G[to].push_back(m - 1);
	}

	bool BFS() {
		memset(vis, 0, sizeof(vis));
		queue<int> Q;
		Q.push(s);
		d[s] = 0;
		vis[s] = 1;
		while (!Q.empty()) {
			int x = Q.front();
			Q.pop();
			for (int i = 0; i < G[x].size(); i++) {
				Edge& e = edges[G[x][i]];
				if (!vis[e.to] && e.cap > e.flow) {
					vis[e.to] = 1;
					d[e.to] = d[x] + 1;
					Q.push(e.to);
				}
			}
		}
		return vis[t];
	}

	int DFS(int x, int a) {
		if (x == t || a == 0) return a;
		int flow = 0, f;
		for (int& i = cur[x]; i < G[x].size(); i++) {
			Edge& e = edges[G[x][i]];
			if (d[x] + 1 == d[e.to] && (f = DFS(e.to, min(a, e.cap - e.flow))) > 0) {
				e.flow += f;
				edges[G[x][i] ^ 1].flow -= f;
				flow += f;
				a -= f;
				if (a == 0) break;
			}
		}
		return flow;
	}

	int Maxflow(int s, int t) {
		this->s = s;
		this->t = t;
		int flow = 0;
		while (BFS()) {
			memset(cur, 0, sizeof(cur));
			flow += DFS(s, INF);
		}
		return flow;
	}
};
endsnippet

#for TrieTree
snippet tmp_trie "TrieTree"
const int NodeSize = ${1:1e4+100}; 

struct TRIETREE {
	int nxt[NodeSize][26]; 
	int exits[NodeSize],cnt;
	TRIETREE() {cnt = 0; /*&& init nxt && exits*/}
	void insertStr(string in,int size) {
		int np = 0,nc; //init np = root
		for(int i=0; i<size; i++) {
			nc = in[i]- 'a';
			if(!nxt[np][nc]) nxt[np][nc] = ++cnt; 
			np = nxt[np][nc];
		}
		exits[cnt]++; 
	}
	bool findStr(string in,int size) {
		int np = 0,nc;
		for(int i=0; i<size; i++) {
			nc = in[i]-'a';
			if(!nxt[np][nc]) return 0; 
			np = nxt[np][nc];
		}
		return exits[np];
	}
};
endsnippet
